from fpdf import FPDF

class AutoReport:
    def __init__(self, target_url, vulnerabilities, results):
        self.target_url = target_url
        self.vulnerabilities = vulnerabilities
        self.results = results

    def create_pdf_report(self):
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()

        pdf.set_font('Arial', 'B', 16)
        pdf.cell(200, 10, txt="Penetration Test Report", ln=True, align='C')

        pdf.ln(10)
        pdf.set_font('Arial', '', 12)
        pdf.cell(200, 10, txt=f"Target URL: {self.target_url}", ln=True)

        pdf.ln(10)
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(200, 10, txt="Vulnerabilities Found:", ln=True)

        pdf.set_font('Arial', '', 12)
        for vuln in self.vulnerabilities:
            pdf.multi_cell(0, 10, f"Vulnerability Type: {vuln['type']}\nPayload: {vuln['payload']}\nURL: {vuln['url']}\n")
            pdf.ln(5)

        pdf.ln(10)
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(200, 10, txt="Exploit Results:", ln=True)

        pdf.set_font('Arial', '', 12)
        for result in self.results:
            pdf.multi_cell(0, 10, f"{result}\n")
            pdf.ln(5)

        pdf.output("penetration_test_report.pdf")
        print("[*] Report saved as 'penetration_test_report.pdf'.")

# Usage
if __name__ == '__main__':
    vulnerabilities = [
        {"type": "SQL Injection", "payload": "' OR 1=1 --", "url": "http://example.com/page?id=1"},
        {"type": "XSS", "payload": "<script>alert('XSS')</script>", "url": "http://example.com/search?q=test"}
    ]
    results = [
        "[+] SQL Injection exploit successful: ' OR 1=1 --",
        "[-] XSS exploit failed: <script>alert('XSS')</script>"
    ]

    report = AutoReport('http://example.com', vulnerabilities, results)
    report.create_pdf_report()

